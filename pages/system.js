import Link from 'next/link';
import Layout from '../components/Layout.js';

import "../styles/index.css";

export default () => pug`
  Layout
    h2 Contest control system

    p.
        During the contest, teams will submit proposed solutions to the contest
        problems to the judges using the Kattis contest control system. The
        team manual for Kattis can be found
        #[a(href="/files/kattis-team-guide.pdf") here].

    h3 Compilation of submissions

    p Source files submitted to the judges will be compiled using the following command line arguments for the respective language:
        ul
            li C (GCC 10.3.0)
                div
                    tt gcc -g -O2 -std=gnu17 -static {files} -lm
            li C++ (GCC 10.3.0)
                div
                    tt g++ -g -O2 -std=gnu++20 -static {files}
            li Java 11 (OpenJDK, Java 11.0.11)
                div
                    tt javac -encoding UTF-8 -sourcepath . -d . {files}
            li Python 3 (PyPy3 7.3.3, Python 3.6.12)
                div
                    tt pypy3 -m py_compile {files}
            li Kotlin (1.4.21)
                div
                    tt kotlinc -d . {files}

    p The "{files}" in the above commands represents the list of source files from the submission which will actually be compiled. Files with the following suffixes (and only files with these suffixes) will be submitted to the compiler:
        ul
            li For C submissions: .c
            li For C++ submissions: .cc. .C, .cpp, .cxx, or .c++
            li For Java submissions: .java
            li For Python submissions: .py
            li For Kotlin submissions: .kt

    h3 Execution of submissions
    p For each language, if the above compilation step is successful then the submission will be executed as follows:
        ul
            li For C/C++: the executable file generated by the compiler will be executed to generate the output of the submission.
            li For Java: the compiled main class will be executed using the following command:
                div
                    tt java -Dfile.encoding=UTF-8 -XX:+UseSerialGC -Xss128m -Xms1856m -Xmx1856m
            li For Python 3: the main source file will be executed by the PyPy3 interpreter to generate the output of the submission.
            li For Kotlin: the compiled main class will be executed using the following command:
                div
                    tt kotlin -Dfile.encoding=UTF-8 -J-XX:+UseSerialGC -J-Xss128m -J-Xms1856m -J-Xmx1856m

    p.
        Execution as described above will take place in a "sandbox". The
        sandbox will allocate 2GB of memory; the entire program, including its
        runtime environment, must execute within this memory limit. For
        interpreted languages (Java, Python, and Kotlin) the runtime
        environment includes the interpreter (that is, the JVM for Java/Kotlin
        and the Python interpreter for Python).

    p.
        The sandbox memory allocation size will be the same for all languages
        and all contest problems. For Java and Kotlin, the above command shows
        the stack size and heap size settings which will be used when the
        program is run in the sandbox. For C, C++, and Python, the heap and
        stack sizes are limited only by the total amount of memory available in
        the sandbox.

`;
